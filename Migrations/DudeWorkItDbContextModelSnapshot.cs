// <auto-generated />
using System;
using DudeWorkIt.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Capstone_Back_End.Migrations
{
    [DbContext(typeof(DudeWorkItDbContext))]
    partial class DudeWorkItDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DudeWorkIt.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfProject")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfProject = new DateTime(2023, 11, 12, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mulch the flower beds and mow the yard",
                            ProjectTypeId = 1,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 2,
                            DateOfProject = new DateTime(2023, 11, 12, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "My garage needs to be painted. It's about 24 x 24 and I have all the paint and supplies. I can pay $15/hour.",
                            ProjectTypeId = 2,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 3,
                            DateOfProject = new DateTime(2023, 11, 13, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "I need help loading a moving truck",
                            ProjectTypeId = 3,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 4,
                            DateOfProject = new DateTime(2023, 11, 14, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need to haul away a bunch of old furniture",
                            ProjectTypeId = 8,
                            UserProfileId = 6
                        });
                });

            modelBuilder.Entity("DudeWorkIt.Models.ProjectAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ProjectAssignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProjectId = 1,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 2,
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 3,
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 4,
                            ProjectId = 4
                        });
                });

            modelBuilder.Entity("DudeWorkIt.Models.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lawn Maintenance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Painting"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Moving"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fencing"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Insulation"
                        },
                        new
                        {
                            Id = 6,
                            Name = "General Labor"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Gutters"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Junk Removal"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Organizing"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Volunteer"
                        });
                });

            modelBuilder.Entity("DudeWorkIt.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "202 Broad Street",
                            FirstName = "Tyler",
                            IdentityUserId = "6f36bd3b-f3b7-4815-ba2a-3788a8469028",
                            LastName = "Toney"
                        },
                        new
                        {
                            Id = 3,
                            Address = "303 Frisco Blvd",
                            FirstName = "Garrett",
                            IdentityUserId = "5389ca0b-0fb5-4ed0-8de5-27143f289661",
                            LastName = "Hilbert"
                        },
                        new
                        {
                            Id = 4,
                            Address = "2110 Gulf ROad",
                            FirstName = "Cory",
                            IdentityUserId = "bdcf5858-0cac-42d4-8a1b-1caf0e14b92d",
                            LastName = "Cotton"
                        },
                        new
                        {
                            Id = 5,
                            Address = "1300 Atlantic Blvd",
                            FirstName = "Coby",
                            IdentityUserId = "1ee32cf6-e93c-49df-9696-97e2378d2181",
                            LastName = "Cotton"
                        },
                        new
                        {
                            Id = 6,
                            Address = "1450 Terrace View Lane",
                            FirstName = "Cody",
                            IdentityUserId = "89e2d93c-f59c-44ad-a2ce-890617777f07",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = 7,
                            Address = "1600 Mascot Circle",
                            FirstName = "Panda",
                            IdentityUserId = "68c01fff-1c37-4fe5-be33-d2f86f716361",
                            LastName = "Monium"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "8723815f-6c39-4db8-a3f5-f63ac1a3eaaa",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "3bc7a629-88b1-4d36-8f2e-48a7969ad5da",
                            ConcurrencyStamp = "6b3821b6-e9b8-49cd-85b2-58ff7c7bb6b6",
                            Name = "Worker",
                            NormalizedName = "worker"
                        },
                        new
                        {
                            Id = "9008fba6-93a0-412d-bc99-84a6cafb2be5",
                            ConcurrencyStamp = "605e00e6-c3f3-462b-a6a5-2a2994d9e28c",
                            Name = "Customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45e1dfba-6240-4bc0-84f5-8b934d1a4e1a",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECePZ4mfb0iWRq7+9GTQpwcUT0FBfeMXvB9LTZuvkrCIUYYhvNxuf1qIlIMa5JQ63A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5497efb2-d68f-4409-9377-5631272d78bc",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "6f36bd3b-f3b7-4815-ba2a-3788a8469028",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b185931b-05fc-4ffb-9ef8-0dd2d71a9188",
                            Email = "tyler@toney.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBM3ZRnjJKITnf4BzxJ7dFPysFOs13L6WqVPb3LrTR/ZzKZn10J0qWA8hKpe8/x2CA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "212f8098-9409-464d-bcaa-fa2454729171",
                            TwoFactorEnabled = false,
                            UserName = "TToney"
                        },
                        new
                        {
                            Id = "5389ca0b-0fb5-4ed0-8de5-27143f289661",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2849d5fa-113e-417b-b2a1-d8c23946ba02",
                            Email = "garrett@hilbert.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGqdpm+Pu/lQ/e4iE1xPjGU/8CyzLII+HXcCoR2dz2O6amFXlBs5KDZw1ULutHuF2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6baae1cc-c440-4b22-8a87-d874ff618a0b",
                            TwoFactorEnabled = false,
                            UserName = "GHilbert"
                        },
                        new
                        {
                            Id = "bdcf5858-0cac-42d4-8a1b-1caf0e14b92d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c204d14-d1ed-4853-ad32-7eebf80aca4b",
                            Email = "cory@cotton.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEH0zs2j+2aXtv7pyuEzykDXy8IkhiyDJZiTP2/5M7Iz+wfbAwXPvgFdHZ1vNfNj0wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f0145ba-84b0-4be3-94be-229a33e58b92",
                            TwoFactorEnabled = false,
                            UserName = "CoryC"
                        },
                        new
                        {
                            Id = "1ee32cf6-e93c-49df-9696-97e2378d2181",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e66238c7-cf5a-4b99-8e2b-20134d8f0cda",
                            Email = "coby@cotton.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFGdRlCrbgO+2xxQG3bQ2gPaLN9ZQMCkZaL5mkI8ualCP/QGIIJRFul5bzBj21JfBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b82b7e92-35a8-4513-8cd0-4b5fc76c8d4c",
                            TwoFactorEnabled = false,
                            UserName = "CobyC"
                        },
                        new
                        {
                            Id = "89e2d93c-f59c-44ad-a2ce-890617777f07",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b8a35d0-5ed8-4618-a92d-6d982d7ccebc",
                            Email = "cody@jones.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEORgJ2UwxWeTkKHw5TX0OzhF86zm2znwGkt5RZsn30XpSTayibWOBL//ptwFbEiGgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a7bd7e4-4f2a-4d9d-ab6d-0f210b5248d3",
                            TwoFactorEnabled = false,
                            UserName = "CJones"
                        },
                        new
                        {
                            Id = "68c01fff-1c37-4fe5-be33-d2f86f716361",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b1164c3-67d9-4290-ab9f-224a5dd0d6d2",
                            Email = "panda@monium.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEILVKQZNKkqp7ANf8g4pCqcfO2eusJeGcRaV8ZNFmniCKA6ehVR1cPzw1V1W1YluMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50f5a956-d2ef-49a5-8d32-f77194507b7c",
                            TwoFactorEnabled = false,
                            UserName = "Panda"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "6f36bd3b-f3b7-4815-ba2a-3788a8469028",
                            RoleId = "3bc7a629-88b1-4d36-8f2e-48a7969ad5da"
                        },
                        new
                        {
                            UserId = "5389ca0b-0fb5-4ed0-8de5-27143f289661",
                            RoleId = "9008fba6-93a0-412d-bc99-84a6cafb2be5"
                        },
                        new
                        {
                            UserId = "bdcf5858-0cac-42d4-8a1b-1caf0e14b92d",
                            RoleId = "9008fba6-93a0-412d-bc99-84a6cafb2be5"
                        },
                        new
                        {
                            UserId = "1ee32cf6-e93c-49df-9696-97e2378d2181",
                            RoleId = "9008fba6-93a0-412d-bc99-84a6cafb2be5"
                        },
                        new
                        {
                            UserId = "89e2d93c-f59c-44ad-a2ce-890617777f07",
                            RoleId = "9008fba6-93a0-412d-bc99-84a6cafb2be5"
                        },
                        new
                        {
                            UserId = "68c01fff-1c37-4fe5-be33-d2f86f716361",
                            RoleId = "3bc7a629-88b1-4d36-8f2e-48a7969ad5da"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DudeWorkIt.Models.Project", b =>
                {
                    b.HasOne("DudeWorkIt.Models.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DudeWorkIt.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectType");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DudeWorkIt.Models.ProjectAssignment", b =>
                {
                    b.HasOne("DudeWorkIt.Models.Project", "Project")
                        .WithMany("ProjectAssignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DudeWorkIt.Models.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId");

                    b.HasOne("DudeWorkIt.Models.UserProfile", "UserProfile")
                        .WithMany("ProjectAssignments")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Project");

                    b.Navigation("ProjectType");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DudeWorkIt.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DudeWorkIt.Models.Project", b =>
                {
                    b.Navigation("ProjectAssignments");
                });

            modelBuilder.Entity("DudeWorkIt.Models.UserProfile", b =>
                {
                    b.Navigation("ProjectAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}

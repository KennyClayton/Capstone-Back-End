// <auto-generated />
using System;
using DudeWorkIt.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Capstone_Back_End.Migrations
{
    [DbContext(typeof(DudeWorkItDbContext))]
    partial class DudeWorkItDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DudeWorkIt.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfProject")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompletedOn = new DateTime(2023, 11, 12, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfProject = new DateTime(2023, 11, 12, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mulch the flower beds and mow the yard",
                            ProjectTypeId = 1,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 2,
                            CompletedOn = new DateTime(2023, 11, 12, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfProject = new DateTime(2023, 11, 12, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "My garage needs to be painted. It's about 24 x 24 and I have all the paint and supplies. I can pay $15/hour.",
                            ProjectTypeId = 2,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 3,
                            DateOfProject = new DateTime(2023, 11, 13, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "I need help loading a moving truck",
                            ProjectTypeId = 3,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 4,
                            DateOfProject = new DateTime(2023, 11, 14, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need to haul away a bunch of old furniture",
                            ProjectTypeId = 8,
                            UserProfileId = 6
                        },
                        new
                        {
                            Id = 5,
                            DateOfProject = new DateTime(2023, 11, 14, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "I think my gutters are clogged, and they ain't gonna clean themselves. Hurry up.",
                            ProjectTypeId = 7,
                            UserProfileId = 6
                        });
                });

            modelBuilder.Entity("DudeWorkIt.Models.ProjectAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ProjectAssignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProjectId = 1,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 2,
                            ProjectId = 2,
                            UserProfileId = 7
                        },
                        new
                        {
                            Id = 3,
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 4,
                            ProjectId = 4
                        },
                        new
                        {
                            Id = 5,
                            ProjectId = 5,
                            UserProfileId = 2
                        });
                });

            modelBuilder.Entity("DudeWorkIt.Models.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lawn Maintenance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Painting"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Moving"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fencing"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Insulation"
                        },
                        new
                        {
                            Id = 6,
                            Name = "General Labor"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Gutters"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Junk Removal"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Organizing"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Volunteer"
                        });
                });

            modelBuilder.Entity("DudeWorkIt.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "202 Broad Street",
                            FirstName = "Tyler",
                            IdentityUserId = "6f36bd3b-f3b7-4815-ba2a-3788a8469028",
                            LastName = "Toney"
                        },
                        new
                        {
                            Id = 3,
                            Address = "303 Frisco Blvd",
                            FirstName = "Garrett",
                            IdentityUserId = "5389ca0b-0fb5-4ed0-8de5-27143f289661",
                            LastName = "Hilbert"
                        },
                        new
                        {
                            Id = 4,
                            Address = "2110 Gulf ROad",
                            FirstName = "Cory",
                            IdentityUserId = "bdcf5858-0cac-42d4-8a1b-1caf0e14b92d",
                            LastName = "Cotton"
                        },
                        new
                        {
                            Id = 5,
                            Address = "1300 Atlantic Blvd",
                            FirstName = "Coby",
                            IdentityUserId = "1ee32cf6-e93c-49df-9696-97e2378d2181",
                            LastName = "Cotton"
                        },
                        new
                        {
                            Id = 6,
                            Address = "1450 Terrace View Lane",
                            FirstName = "Cody",
                            IdentityUserId = "89e2d93c-f59c-44ad-a2ce-890617777f07",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = 7,
                            Address = "1600 Mascot Circle",
                            FirstName = "Panda",
                            IdentityUserId = "68c01fff-1c37-4fe5-be33-d2f86f716361",
                            LastName = "Monium"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "303adf28-a138-427d-95d1-eb2413036181",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "3bc7a629-88b1-4d36-8f2e-48a7969ad5da",
                            ConcurrencyStamp = "229e00e7-2a44-4f53-ba6c-544b66ad52ac",
                            Name = "Worker",
                            NormalizedName = "worker"
                        },
                        new
                        {
                            Id = "9008fba6-93a0-412d-bc99-84a6cafb2be5",
                            ConcurrencyStamp = "b9ba2969-95bf-446b-9ebc-6a8afa2173de",
                            Name = "Customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93f08a5e-54de-4790-84b8-354b58311add",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENTowj7dyCXKBJWKiuuS0X1UzJ0OKqIhIdfRrVg+RlpD6Q/v2fSZatUqftGGVLzEKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da95c998-0d48-4309-a11b-27bd10b86180",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "6f36bd3b-f3b7-4815-ba2a-3788a8469028",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e16334b-3d3b-474d-86da-c7fc15cb7f3f",
                            Email = "tyler@toney.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBppAqu6J+pxubeb0Yb//SSg8LewJ/0V+RBWZS1L3Jq0bQoRbj6a0t0LCMm5Q08edw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16ad3394-66d6-45ae-9b88-4bcec974678b",
                            TwoFactorEnabled = false,
                            UserName = "TToney"
                        },
                        new
                        {
                            Id = "5389ca0b-0fb5-4ed0-8de5-27143f289661",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66d42e7a-bbf1-4551-ba9e-e3efc52bde29",
                            Email = "garrett@hilbert.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEF2Dn2w/nFstupKuV8tevSepCu2HVjW4Emy7X83D054orU43mP0TlDyTaiapmdKGkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c176278-a5c6-4e38-8b34-761acd5c0676",
                            TwoFactorEnabled = false,
                            UserName = "GHilbert"
                        },
                        new
                        {
                            Id = "bdcf5858-0cac-42d4-8a1b-1caf0e14b92d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "022d26f4-7188-4007-b794-67c833528805",
                            Email = "cory@cotton.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMP8olXP+a2hzSXbwNcN7QXCdL0p6VhG5dpoOnLRZJhfBHm7HpcBmfonZoJzsbDtDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5dadfea9-f1bd-4298-bebe-bafa561a5823",
                            TwoFactorEnabled = false,
                            UserName = "CoryC"
                        },
                        new
                        {
                            Id = "1ee32cf6-e93c-49df-9696-97e2378d2181",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aea3ddb7-e022-41f0-848c-13e326579ba3",
                            Email = "coby@cotton.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOgwKJwp2Eb60L+7nUYO3wlzg45+Nqt0wGkePtmYrHFSbVHcwtevALzTW7BEt3PddQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bf0f3df-b814-4788-a012-e59a8a8e078e",
                            TwoFactorEnabled = false,
                            UserName = "CobyC"
                        },
                        new
                        {
                            Id = "89e2d93c-f59c-44ad-a2ce-890617777f07",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "494fcce6-703d-4367-975d-17936f887123",
                            Email = "cody@jones.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMREWUNWL5aSoYlvFH0iWc/YMme45YgVzot07bgtONfk+r8aWK9PzrVpuYhR2USBvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d059a96-5cc7-4d86-9225-b51bd2359f20",
                            TwoFactorEnabled = false,
                            UserName = "CJones"
                        },
                        new
                        {
                            Id = "68c01fff-1c37-4fe5-be33-d2f86f716361",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01f35a00-7545-4e31-a2f3-2894f702214a",
                            Email = "panda@monium.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGy3PkvpPxrBQJRm9yxV+enS1KTCjV12riPTeJLUpdN4NNAXXaWQUezaD5+UmlX6QQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d42f507d-75b0-43ee-9200-38b3e7d675cb",
                            TwoFactorEnabled = false,
                            UserName = "Panda"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "6f36bd3b-f3b7-4815-ba2a-3788a8469028",
                            RoleId = "3bc7a629-88b1-4d36-8f2e-48a7969ad5da"
                        },
                        new
                        {
                            UserId = "5389ca0b-0fb5-4ed0-8de5-27143f289661",
                            RoleId = "9008fba6-93a0-412d-bc99-84a6cafb2be5"
                        },
                        new
                        {
                            UserId = "bdcf5858-0cac-42d4-8a1b-1caf0e14b92d",
                            RoleId = "9008fba6-93a0-412d-bc99-84a6cafb2be5"
                        },
                        new
                        {
                            UserId = "1ee32cf6-e93c-49df-9696-97e2378d2181",
                            RoleId = "9008fba6-93a0-412d-bc99-84a6cafb2be5"
                        },
                        new
                        {
                            UserId = "89e2d93c-f59c-44ad-a2ce-890617777f07",
                            RoleId = "9008fba6-93a0-412d-bc99-84a6cafb2be5"
                        },
                        new
                        {
                            UserId = "68c01fff-1c37-4fe5-be33-d2f86f716361",
                            RoleId = "3bc7a629-88b1-4d36-8f2e-48a7969ad5da"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DudeWorkIt.Models.Project", b =>
                {
                    b.HasOne("DudeWorkIt.Models.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DudeWorkIt.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectType");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DudeWorkIt.Models.ProjectAssignment", b =>
                {
                    b.HasOne("DudeWorkIt.Models.Project", "Project")
                        .WithMany("ProjectAssignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DudeWorkIt.Models.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId");

                    b.HasOne("DudeWorkIt.Models.UserProfile", "UserProfile")
                        .WithMany("ProjectAssignments")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Project");

                    b.Navigation("ProjectType");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DudeWorkIt.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DudeWorkIt.Models.Project", b =>
                {
                    b.Navigation("ProjectAssignments");
                });

            modelBuilder.Entity("DudeWorkIt.Models.UserProfile", b =>
                {
                    b.Navigation("ProjectAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
